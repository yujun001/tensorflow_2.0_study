## 通过向 tf.keras.models.Sequential() 提供一个层的列表，
## 就能快速地建立一个 tf.keras.Model 模型并返回
model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(100, activation=tf.nn.relu),
    tf.keras.layers.Dense(10),
    tf.keras.layers.Softmax()
])

## Keras 提供了 Functional API，帮助我们建立更为复杂的模型，
```
使用方法是将层作为可调用的对象并返回张量（这点与之前章节的使用方法一致），
并将输入向量和输出向量提供给 tf.keras.Model 的 inputs 和 outputs 参数
```

inputs = tf.keras.Input(shape=(28, 28, 1))
x = tf.keras.layers.Flatten()(inputs)
x = tf.keras.layers.Dense(units=100, activation=tf.nn.relu)(x)
x = tf.keras.layers.Dense(units=10)(x)
outputs = tf.keras.layers.Softmax()(x)
model = tf.keras.Model(inputs=inputs, outputs=outputs)

## 使用 Keras Model 的 compile 、 fit 和 evaluate 方法训练和评估模型 
```
oplimizer ：优化器，可从 tf.keras.optimizers 中选择；
loss ：损失函数，可从 tf.keras.losses 中选择；
metrics ：评估指标，可从 tf.keras.metrics 中选择。
```
model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    loss=tf.keras.losses.sparse_categorical_crossentropy,
    metrics=[tf.keras.metrics.sparse_categorical_accuracy]
    )

## tf.keras.Model 的 fit 方法训练模型：
```
x ：训练数据；
y ：目标数据（数据标签）；
epochs ：将训练数据迭代多少遍；
batch_size ：批次的大小；
validation_data ：验证数据，可用于在训练过程中监控模型的性能。
```

model.fit(data_loader.train_data,    
		  data_loader.train_label, 
		  epochs=num_epochs, 
		  batch_size=batch_size)
		  

## 使用 tf.keras.Model.evaluate 评估训练效果，提供测试数据及标签
print(model.evaluate(data_loader.test_data, data_loader.test_label))





